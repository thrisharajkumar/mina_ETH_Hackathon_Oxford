"use strict";
/* TypeScript file generated from CodaSDK.re by genType. */
/* eslint-disable import/first */
exports.__esModule = true;
exports.signedRosettaTransactionToSignedCommand = exports.verifyStakeDelegationSignature = exports.verifyPaymentSignature = exports.signStakeDelegation = exports.signPayment = exports.verifyMessage = exports.signMessage = exports.verifyKeypair = exports.derivePublicKey = exports.genKeys = void 0;
// @ts-ignore: Implicit any on import
var CodaSDKBS = require('./CodaSDK.bs');
/**
  * Generates a public/private keypair
  */
exports.genKeys = CodaSDKBS.genKeys;
/**
  * Derives the public key of the corresponding private key
  *
  * @param privateKey - The private key used to get the corresponding public key
  * @returns A public key
  */
exports.derivePublicKey = CodaSDKBS.derivePublicKey;
/**
  * Verifies if a keypair is valid by checking if the public key can be derived from
  * the private key and additionally checking if we can use the private key to
  * sign a transaction. If the keypair is invalid, an exception is thrown.
  *
  * @param keypair - A keypair
  * @returns True if the `keypair` is a verifiable keypair, otherwise throw an exception
   */
exports.verifyKeypair = CodaSDKBS.verifyKeypair;
/**
  * Signs an arbitrary message
  *
  * @param key - The keypair used to sign the message
  * @param message - An arbitrary string message to be signed
  * @returns A signed message
  */
exports.signMessage = CodaSDKBS.signMessage;
/**
  * Verifies that a signature matches a message.
  *
  * @param signedMessage - A signed message
  * @returns True if the `signedMessage` contains a valid signature matching
  * the message and publicKey.
  */
exports.verifyMessage = CodaSDKBS.verifyMessage;
/**
  * Signs a payment transaction using a private key.
  *
  * This type of transaction allows a user to transfer funds from one account
  * to another over the network.
  *
  * @param payment - An object describing the payment
  * @param key - The keypair used to sign the transaction
  * @returns A signed payment transaction
  */
exports.signPayment = CodaSDKBS.signPayment;
/**
  * Signs a stake delegation transaction using a private key.
  *
  * This type of transaction allows a user to delegate their
  * funds from one account to another for use in staking. The
  * account that is delegated to is then considered as having these
  * funds when determining whether it can produce a block in a given slot.
  *
  * @param stakeDelegation - An object describing the stake delegation
  * @param key - The keypair used to sign the transaction
  * @returns A signed stake delegation
  */
exports.signStakeDelegation = CodaSDKBS.signStakeDelegation;
/**
  * Verifies a signed payment.
  *
  * @param signedPayment - A signed payment transaction
  * @returns True if the `signed(payment)` is a verifiable payment
   */
exports.verifyPaymentSignature = CodaSDKBS.verifyPaymentSignature;
/**
  * Verifies a signed stake delegation.
  *
  * @param signedStakeDelegation - A signed stake delegation
  * @returns True if the `signed(stakeDelegation)` is a verifiable stake delegation
   */
exports.verifyStakeDelegationSignature = CodaSDKBS.verifyStakeDelegationSignature;
/**
  * Converts a Rosetta signed transaction to a JSON string that is
  * compatible with GraphQL. The JSON string is a representation of
  * a `Signed_command` which is what our GraphQL expects.
  *
  * @param signedRosettaTxn - A signed Rosetta transaction
  * @returns A string that represents the JSON conversion of a signed Rosetta transaction`.
   */
exports.signedRosettaTransactionToSignedCommand = CodaSDKBS.signedRosettaTransactionToSignedCommand;
