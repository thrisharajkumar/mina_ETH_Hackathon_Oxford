// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Client_sdkBcJs = require("./client_sdk.bc.js");

var defaultValidUntil = "4294967295";

var codaSDK = Client_sdkBcJs.minaSDK;

function genKeys(param) {
  return codaSDK.genKeys();
}

function derivePublicKey(privateKey) {
  return codaSDK.publicKeyOfPrivateKey(privateKey);
}

function verifyKeypair(keypair) {
  return codaSDK.validKeypair(keypair);
}

function signMessage(message, key) {
  return {
          publicKey: key.publicKey,
          signature: codaSDK.signString(key.privateKey, message),
          payload: message
        };
}

function verifyMessage(signedMessage) {
  return codaSDK.verifyStringSignature(signedMessage.signature, signedMessage.publicKey, signedMessage.payload);
}

function value($$default, option) {
  var go = function (param) {
    return (function value($$default, opt) {
      if (opt !== undefined) {
        return opt;
      } else {
        return $$default;
      }
    });
  };
  return go(undefined)($$default, option);
}

function signPayment(payment, key) {
  var memo = value("", payment.memo);
  var fee = String(payment.fee);
  var nonce = String(payment.nonce);
  var amount = String(payment.amount);
  var validUntil = String(value(defaultValidUntil, payment.validUntil));
  return {
          publicKey: key.publicKey,
          signature: codaSDK.signPayment(key.privateKey, {
                common: {
                  fee: fee,
                  feePayer: key.publicKey,
                  nonce: nonce,
                  validUntil: validUntil,
                  memo: memo
                },
                paymentPayload: {
                  source: payment.from,
                  receiver: payment.to,
                  amount: amount
                }
              }).signature,
          payload: {
            to: payment.to,
            from: payment.from,
            fee: fee,
            amount: amount,
            nonce: nonce,
            memo: memo,
            validUntil: validUntil
          }
        };
}

function signStakeDelegation(stakeDelegation, key) {
  var memo = value("", stakeDelegation.memo);
  var fee = String(stakeDelegation.fee);
  var nonce = String(stakeDelegation.nonce);
  var validUntil = String(value(defaultValidUntil, stakeDelegation.validUntil));
  return {
          publicKey: key.publicKey,
          signature: codaSDK.signStakeDelegation(key.privateKey, {
                common: {
                  fee: fee,
                  feePayer: key.publicKey,
                  nonce: nonce,
                  validUntil: validUntil,
                  memo: memo
                },
                delegationPayload: {
                  newDelegate: stakeDelegation.to,
                  delegator: stakeDelegation.from
                }
              }).signature,
          payload: {
            to: stakeDelegation.to,
            from: stakeDelegation.from,
            fee: fee,
            nonce: nonce,
            memo: memo,
            validUntil: validUntil
          }
        };
}

function verifyPaymentSignature(signedPayment) {
  var payload = signedPayment.payload;
  var memo = value("", payload.memo);
  var fee = String(payload.fee);
  var amount = String(payload.amount);
  var nonce = String(payload.nonce);
  var validUntil = String(value(defaultValidUntil, payload.validUntil));
  return codaSDK.verifyPaymentSignature({
              sender: signedPayment.publicKey,
              signature: signedPayment.signature,
              payment: {
                common: {
                  fee: fee,
                  feePayer: payload.from,
                  nonce: nonce,
                  validUntil: validUntil,
                  memo: memo
                },
                paymentPayload: {
                  source: payload.from,
                  receiver: payload.to,
                  amount: amount
                }
              }
            });
}

function verifyStakeDelegationSignature(signedStakeDelegation) {
  var payload = signedStakeDelegation.payload;
  var memo = value("", payload.memo);
  var fee = String(payload.fee);
  var nonce = String(payload.nonce);
  var validUntil = String(value(defaultValidUntil, payload.validUntil));
  return codaSDK.verifyStakeDelegationSignature({
              sender: signedStakeDelegation.publicKey,
              signature: signedStakeDelegation.signature,
              stakeDelegation: {
                common: {
                  fee: fee,
                  feePayer: payload.from,
                  nonce: nonce,
                  validUntil: validUntil,
                  memo: memo
                },
                delegationPayload: {
                  newDelegate: payload.to,
                  delegator: payload.from
                }
              }
            });
}

function signedRosettaTransactionToSignedCommand(signedRosettaTxn) {
  return codaSDK.signedRosettaTransactionToSignedCommand(signedRosettaTxn);
}

exports.defaultValidUntil = defaultValidUntil;
exports.codaSDK = codaSDK;
exports.genKeys = genKeys;
exports.derivePublicKey = derivePublicKey;
exports.verifyKeypair = verifyKeypair;
exports.signMessage = signMessage;
exports.verifyMessage = verifyMessage;
exports.value = value;
exports.signPayment = signPayment;
exports.signStakeDelegation = signStakeDelegation;
exports.verifyPaymentSignature = verifyPaymentSignature;
exports.verifyStakeDelegationSignature = verifyStakeDelegationSignature;
exports.signedRosettaTransactionToSignedCommand = signedRosettaTransactionToSignedCommand;
/* codaSDK Not a pure module */
